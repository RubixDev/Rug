apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'

int mcVersion = project.mcVersion

repositories {
    maven { url 'https://jitpack.io' }
    // maven { url 'https://maven.fallenbreath.me/releases' }

    // Carpet Mod
    maven { url 'https://masa.dy.fi/maven' }
    // SGUI
    maven { url 'https://maven.nucleoid.xyz' }
    // BRRP
//    maven { url 'https://raw.githubusercontent.com/SolidBlock-cn/mvn-repo/main' }
    maven { url 'https://api.modrinth.com/maven' }
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

dependencies {
    // loom
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // dependencies
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "carpet:fabric-carpet:${project.carpet_core_version}"

    // libraries
    modImplementation include("eu.pb4:sgui:${project.sgui_version}")
//    include(modImplementation("me.fallenbreath:conditional-mixin:${project.conditionalmixin_version}"))
//    include(annotationProcessor(implementation("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")))
    modImplementation "maven.modrinth:brrp:${project.brrp_version}"
}

String MIXIN_CONFIG_PATH = 'rug.mixins.json'
String LANG_DIR = 'assets/rug/lang'
JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 12005) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_21
} else if (mcVersion >= 11800) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
    JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}

loom {
    accessWidenerPath = file("${project.mod_id}.accesswidener")

    runConfigs.configureEach {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        runDir '../../run'
        vmArgs '-Dmixin.debug.export=true'
    }
//    // [FEATURE] MIXIN_AUDITOR
//    runs {
//        serverMixinAudit {
//            server()
//            vmArgs '-DmixinAuditor.audit=true'
//            ideConfigGenerated false
//        }
//    }
}

String versionSuffix = ''
// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (System.getenv("BUILD_RELEASE") != "true") {
    String buildNumber = System.getenv("BUILD_ID")
    versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SNAPSHOT'
}
String fullModVersion = project.mod_version + versionSuffix

version = 'v' + fullModVersion
group = project.maven_group
base.archivesName = project.archives_base_name + '-mc' + project.minecraft_version

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
    from "${project.mod_id}.accesswidener"

    inputs.property "id", project.mod_id
    inputs.property "name", project.mod_name
    inputs.property "version", fullModVersion
    inputs.property "minecraft_dependency", project.minecraft_dependency

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "id": project.mod_id,
                "name": project.mod_name,
                "version": fullModVersion,
                "minecraft_dependency": project.minecraft_dependency,
                "carpet_dependency": project.carpet_dependency,
        ]
        expand valueMap
    }

    filesMatching(MIXIN_CONFIG_PATH) {
        filter { s -> s.replace('{{COMPATIBILITY_LEVEL}}', "JAVA_${JAVA_COMPATIBILITY.ordinal() + 1}") }
    }
}

// https://github.com/Fallen-Breath/yamlang
yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = LANG_DIR
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

java {
    sourceCompatibility = JAVA_COMPATIBILITY
    targetCompatibility = JAVA_COMPATIBILITY

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${project.archives_base_name}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()

            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // mavenLocal()
    }
}
